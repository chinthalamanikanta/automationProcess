name: Build and Deploy to AKS

# Trigger when changes are pushed to the main branch
on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx for multi-platform support
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}  # Ensure this secret contains a valid JSON string
        client-id: ${{ secrets.AZURE_CLIENT_ID }}  # Your client-id
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}  # Your tenant-id
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # Your subscription-id
        enable-AzPSSession: false  # Optional: false by default
        environment: azurecloud  # Optional: defaults to 'azurecloud'
        allow-no-subscriptions: false  # Optional: false by default
        audience: api://AzureADTokenExchange  # Optional: Specify your audience if needed
        auth-type: SERVICE_PRINCIPAL  # Ensure this is correctly set to SERVICE_PRINCIPAL

    # Step 4: Log in to Azure Container Registry
    - name: Log in to ACR
      uses: azure/docker-login@v1
      with:
        login-server: manicontainer.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}  # Ensure this secret is defined
        password: ${{ secrets.ACR_PASSWORD }}  # Ensure this secret is defined

    # Step 5: Build and push Docker image to ACR
    - name: Build and push Docker image to ACR
      run: |
        docker build -f subfolder/Dockerfile -t manicontainer.azurecr.io/firstproject:${{ github.sha }} .
        docker push manicontainer.azurecr.io/firstproject:${{ github.sha }}
        docker push manicontainer.azurecr.io/firstproject:latest

    # Step 6: Upload Kubernetes manifests
    - name: Upload Kubernetes manifests
      uses: actions/upload-artifact@v4  # Updated version
      with:
        name: manifests
        path: ./manifests/

  # Deploy job
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Azure login
    - name: Log in to Azure for Deploy
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # Your subscription-id

    # Step 3: Set up kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1

    # Step 4: Configure kubectl to access AKS cluster
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group <your-resource-group> --name <your-aks-cluster> --admin

    # Step 5: Download Kubernetes manifests
    - name: Download Kubernetes manifests
      uses: actions/download-artifact@v4  # Updated version
      with:
        name: manifests
        path: ./manifests/

    # Step 6: Deploy to AKS using kubectl
    - name: Deploy to AKS
      run: |
        kubectl apply -f ./manifests/deployment.yml
        kubectl apply -f ./manifests/service.yml
        kubectl rollout status deployment/firstproject-deployment

    # Step 7: Clean up
    - name: Clean up manifests
      run: |
        rm -rf ./manifests/
